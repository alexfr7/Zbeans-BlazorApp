@page "/manageAccess"

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;

@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Manage Access</h3>

<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMIN))
        {
            <p>You are an administrator and can edit this to add more managers.</p>
        }
        else
        {
            <p>You are not signed in as an administrator.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in. Please login to see this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMIN = "Administrator";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        //make sure there is an administration role
        //"ADMIN"

        var roleResult = await _RoleManager.FindByNameAsync(ADMIN);
        //Make ADMIN a role

        if(roleResult == null)
        {
            await _RoleManager.CreateAsync(new IdentityRole(ADMIN));
        }

        // we would put carters email here
        var user = await _UserManager.FindByNameAsync("AMARLEYF@GMAIL.COM");
        if (user != null)
        {
            //make sure he is admin
            var userResult = await _UserManager.IsInRoleAsync(user, ADMIN);
            if(!userResult)
            {
                //make him admin
                await _UserManager.AddToRoleAsync(user, ADMIN);
            }
        }

        //get current user

        CurrentUser = (await authenticationStateTask).User;
    }



}
