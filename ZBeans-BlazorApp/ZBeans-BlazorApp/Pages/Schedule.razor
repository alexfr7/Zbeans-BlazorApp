@page "/schedule"
@using Radzen.Blazor
@using Radzen
@using Models
@using ZBeans_BlazorApp.Data.Schedule;

@using Microsoft.EntityFrameworkCore

@inject ScheduleService scheduleService
@inject EmployeeService employeeService
@inject DialogService  dialogService

<RadzenDialog/>

<h3>Schedule</h3>
<h4>Week of @currWeek.ToString(@"MM/dd/yy") </h4>
<button @onclick="@TestDebug" class="btn btn-warning">Test Debug</button>
<div class="table-responsive">
    <table class="table table-sm">
        <thead>
            <tr>
                <th scope="col">Time</th>
                <th scope="col">Monday</th>
                <th scope="col">Tuesday</th>
                <th scope="col">Wednesday</th>
                <th scope="col">Thursday</th>
                <th scope="col">Friday</th>
                <th scope="col">Saturday</th>
                <th scope="col">Sunday</th>
            </tr>
        </thead>
        <tbody>
            @if (schedule == null || employees == null)
            {
                <tr>
                    Loading...
                </tr>
            }
            else
            {
                @for (int i = 0; i < 48; i++)
                {

                    slotIndex = i;
                    <tr>
                        <td> @TimeSpan.FromMinutes(i * 30).ToString(@"hh\:mm") </td>
                        @for (int j = 0; j < 7; j++)
                        {
                            dayIndex = j;
                            GetCellClass(j, i);


                            <td class="@cellClass text-center">
                                @GetEmployeeNum(j, i) / @GetRequiredNum(j, i)<br /><RadzenButton class="btn btn-outline-dark" Text="Edit" Click="@(args => dialogService.Open<RadzenCard>(title: "title"))">Edit</RadzenButton>
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


@functions {
    TimeSpan timeTrack = new TimeSpan(0, 0, 0);
    DateTime currWeek = DateTime.Now.StartOfWeek(DayOfWeek.Monday);
    int dayIndex = 0;
    int slotIndex = 0;
    string cellClass;
    public string testDebug { get; set; }
    public List<Day> schedule;
    List<Employee> employees;

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        employees = await employeeService.GetEmployeesAsync();
        schedule = await scheduleService.GetScheduleAsync(currWeek);
        foreach(var day in schedule)
        {
            day.ParseFromScheduleList(employees);
        }

    }

    protected int GetEmployeeNum(int dayIndex, int slotIndex)
    {
        return schedule[dayIndex].GetEmployees(slotIndex).Count;
    }

    protected int GetRequiredNum(int dayIndex, int slotIndex)
    {
        return schedule[dayIndex].EmployeeRequirements()[slotIndex];
    }

    protected string GetScheduleValue(int index)
    {
        string test;
        if (schedule[index] == null)
        {
            test = "none";
        }
        else
        {
            test = schedule[index].DailyScheduleList;
        }

        return test;
    }


    protected void AddEmployeeTest()
    {

    }

    protected async void TestDebug()
    {
        await scheduleService.InsertDayAsync(new Day
        { Date = DateTime.Now.Date, DailyScheduleList = "TestList" });

        Day wednesdayTest = (await scheduleService.GetScheduleAsync(DateTime.Now))[3];
        if (wednesdayTest == null)
            testDebug = "TestList";
        else
            testDebug = wednesdayTest.DailyScheduleList;


    }

    protected void GetCellClass(int _dayIndex, int timeIndex)
    {
        Day cellDay = schedule[_dayIndex];

        List<Employee> slotEmployees = cellDay.GetEmployees(timeIndex);

        if(slotEmployees.Count < cellDay.EmployeeRequirements()[timeIndex])
        {
            cellClass = "bg-warning";
        }
        else
        {
            cellClass = "bg-success";
        }

    }


}