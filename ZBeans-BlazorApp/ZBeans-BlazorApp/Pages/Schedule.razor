@page "/schedule"
@using Radzen.Blazor
@using Radzen
@using Models
@using ZBeans_BlazorApp.Data.Schedule;
@using Microsoft.EntityFrameworkCore

@inject ScheduleService scheduleService
@inject EmployeeService employeeService 

<h3>Schedule</h3>
<h4>Week of @currWeek.ToString(@"MM/dd/yy") </h4>
<button @onclick="@TestDebug" class="btn btn-warning">@TestResult()</button>
<table class="table table-sm">
    <thead>
        <tr>
            <th scope="col">Time</th>
            <th scope="col">Monday</th>
            <th scope="col">Tuesday</th>
            <th scope="col">Wednesday</th>
            <th scope="col">Thursday</th>
            <th scope="col">Friday</th>
            <th scope="col">Saturday</th>
            <th scope="col">Sunday</th>
        </tr>
    </thead>
    <tbody>
    @if (schedule == null || employees == null)
    {
        <tr>
            Loading...
        </tr>
    }
    else
    {
        @for (int i = 0; i < 48; i++)
        {
            <tr>
                <td> @TimeSpan.FromMinutes(i * 30).ToString(@"hh\:mm") </td>
                <td><button class="btn btn-outline-dark">@GetScheduleValue(0)</button> </td>
                <td><button class="btn btn-outline-dark">@GetScheduleValue(1)</button></td>
                <td><button class="btn btn-outline-dark">@GetScheduleValue(2)</button></td>
                <td><button class="btn btn-outline-dark">@GetScheduleValue(3)</button></td>
                <td><button class="btn btn-outline-dark">@GetScheduleValue(4)</button></td>
                <td><button class="btn btn-outline-dark">@GetScheduleValue(5)</button></td>
                <td><button class="btn btn-outline-dark">@GetScheduleValue(6)</button></td>
            </tr>
        }
    }
    </tbody>
</table>


@functions {
    TimeSpan timeTrack = new TimeSpan(0, 0, 0);
    DateTime currWeek = DateTime.Now.StartOfWeek(DayOfWeek.Monday);

    public List<Day> schedule;
    List<Employee> employees;

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        employees = await employeeService.GetEmployeesAsync();
        schedule = await scheduleService.GetScheduleAsync(currWeek);

    }

    protected string GetScheduleValue(int index)
    {
        string test;
        if(schedule[index] == null)
        {
            test = "none";
        }
        else
        {
            test = schedule[index].DailyScheduleList;
        }

        return test;
    }

    protected void TestDebug()
    {
        scheduleService.InsertDayAsync(new Day
        { Date = DateTime.Now, DailyScheduleList = "TestList" }, DayOfWeek.Thursday);

    }

    protected async Task<string> TestResult()
    {
        Day wednesdayTest = (await scheduleService.GetScheduleAsync(DateTime.Now))[3];
        if (wednesdayTest == null)
            return "TestList";
        else
            return wednesdayTest.DailyScheduleList;
    }
}