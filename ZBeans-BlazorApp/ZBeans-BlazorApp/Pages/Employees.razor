@page "/employees"

@using ZBeans_BlazorApp.Data
@using ZBeans_BlazorApp.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Web
@using Radzen
@using Radzen.Blazor

@inject EmployeeService employeeService
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Employee Database</h3>



<!--This page is only able to be edited and seen if you are a manager or an admin-->
<AuthorizeView Roles="User, Admin">
    <NotAuthorized>
        <p>You do not have permission to view this page. Please contact the Administrator for assistance.</p>
    </NotAuthorized>
    <Authorized>
        <p>This shows a list of all current employees. </p>

        @if (employees == null)
        {
            <p><em>Loading...</em></p>
        }
        else

        {
            //The button to add a new employee
            <button @onclick="@Add" class=" btn btn-success">Add</button>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Level</th>
                        <th>Preferred Days</th>
                    </tr>
                </thead>

                <tbody>
                    <!--Show every employeee that is stored in the StoreDbContext-->
                    @foreach (var item in employees)
                    {
                        <tr @onclick="@(() => Show(item.EmployeeId))">
                            <td>@item.EmployeeId.Substring(0, 10)</td>
                            <td>@item.FirstName</td>
                            <td>@item.LastName</td>
                            <td>@item.Level</td>
                            <td>@item.PreferredDays</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <!--Popups to display the information overtop of the employee list-->

        @if (employees != null && mode == MODE.Add && ShowPopup) //Insert  Form
        {
            <div class=" modal" overflow="visible" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class=" modal-content">
                        <div class=" modal-header">
                            <h3 class="modal-title">Add New Employee</h3>
                            <button type="button" class=" close"
                                    @onclick="@Cancel">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <div class="modal-body" overflow-y: visible>
                            <input placeholder="First Name" @bind="firstName" />
                            <br />
                            <input placeholder="Last Name" @bind="lastName" />
                            <br />
                            <input placeholder="Level" @bind="level" />
                            <br />

                            <h5>Availability</h5>
                            <RadzenAccordion Multiple="true">
                                <Items>
                                    <RadzenAccordionItem Text="Monday">
                                        <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="values" Multiple="true" Data="@times" TextProperty="TIme" ValueProperty="timeWork"
                                                       Change="@Change" Style="margin-bottom: 20px; height:200px;" />
                                    </RadzenAccordionItem>
                                    <RadzenAccordionItem Text="Tuesday">
                                        Tusday availability
                                    </RadzenAccordionItem>
                                    <RadzenAccordionItem Text="Wednesday">
                                        availability
                                    </RadzenAccordionItem>
                                    <RadzenAccordionItem Text="Thursday">
                                        availability
                                    </RadzenAccordionItem>
                                    <RadzenAccordionItem Text="Friday">
                                        availability
                                    </RadzenAccordionItem>
                                    <RadzenAccordionItem Text="Saturday">
                                        availability
                                    </RadzenAccordionItem>
                                    <RadzenAccordionItem Text="Sunday">
                                        availability
                                    </RadzenAccordionItem>
                                </Items>
                            </RadzenAccordion>
                            <h5>Preferred Day(s)</h5>
                            <RadzenCheckBox @bind-Value="@checkboxMon" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Monday" Component="checkboxMon" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxTue" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Tuesday" Component="checkboxTue" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxWed" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Wednesday" Component="checkboxWed" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxThu" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Thursday" Component="checkboxThu" Style="margin-left: 5px;margin-bottom: 20px" />
                            <br/>
                            <RadzenCheckBox @bind-Value="@checkboxFri" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Friday" Component="checkboxFri" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxSat" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Saturday" Component="checkboxSat" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxSun" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Sunday" Component="checkboxSun" Style="margin-left: 5px;margin-bottom: 20px" />
                            <br />
                        </div>
                        <button @onclick="@Insert" class="btn btn-warning">Insert</button>
                        <button @onclick="@Cancel" class="btn btn-dark">Cancel</button>
                    </div>
                </div>
            </div>
        }

        @if (employees != null && mode == MODE.EditDelete && ShowPopup) //Update and Delete Form
        {
            <div class=" modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class=" modal-content">
                        <div class=" modal-header">
                            <h3 class="modal-title">Edit or Delete Employee</h3>
                            <button type="button" class=" close"
                                    @onclick="@Cancel">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <input type="hidden" @bind="@employeeId" />
                            <br />
                            <input placeholder="First Name" @bind="@firstName" />
                            <br />
                            <input placeholder="Last Name" @bind="@lastName" />
                            <br />
                            <input placeholder="Level" @bind="@level" />
                            <br />
                            <h5>Availability</h5>

                            <br />
                            <h5>Preferred Day(s)</h5>
                            <RadzenCheckBox @bind-Value="@checkboxMon" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Monday" Component="checkboxMon" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxTue" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Tuesday" Component="checkboxTue" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxWed" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Wednesday" Component="checkboxWed" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxThu" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Thursday" Component="checkboxThu" Style="margin-left: 5px;margin-bottom: 20px" />
                            <br />
                            <RadzenCheckBox @bind-Value="@checkboxFri" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Friday" Component="checkboxFri" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxSat" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Saturday" Component="checkboxSat" Style="margin-left: 5px;margin-bottom: 20px" />
                            <RadzenCheckBox @bind-Value="@checkboxSun" Style="margin-bottom: 20px" TValue="bool" Change="@Change" />
                            <RadzenLabel Text="Sunday" Component="checkboxSun" Style="margin-left: 5px;margin-bottom: 20px" />
                            <br />
                        </div>
                        <button @onclick="@Update" class="btn btn-primary">Update</button>

                        <button @onclick="@Delete" class="btn btn-danger">Delete</button>
                        <button @onclick="@Cancel" class="btn btn-dark">Cancel</button>

                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>
@functions{
        List<Employee> employees;
        string employeeId;
        string firstName;
        string lastName;
        string level;
    private enum MODE { None, Add, EditDelete };
    MODE mode = MODE.None;
    Employee employee;
    bool ShowPopup = false;
    IEnumerable<string> values = new string[] {""};
    List<string> daysOfWeek = new List<string> { "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };
    IEnumerable<string> times = new List<string> { "8:00", "8:30", "9:00", "9:30", "10:00", "10:30", "11:00", "11:30", "12:00" };
    //checkboxes for the days of the week
    bool checkboxMon, checkboxTue, checkboxWed, checkboxThu, checkboxFri, checkboxSat, checkboxSun;
    List<string> preferredDays = new List<string> { "" };

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        employees = await employeeService.GetEmployeesAsync();


    }

    protected async Task Insert()
    {
        //add the preferred days
        await AddDays();
        string days = ListToString(preferredDays);
        Employee e = new Employee()
        {
            EmployeeId = Guid.NewGuid().ToString(),
            FirstName = firstName,
            LastName = lastName,
            Level = level,
            PreferredDays = days
        };

        await employeeService.InsertEmployeeAsync(e);
        ClearFields();
        await load();
        mode = MODE.None;   //hide the insert menu
        ShowPopup = false;
    }

    protected void ClearFields()
    {
        employeeId = string.Empty;
        firstName = string.Empty;
        lastName = string.Empty;
        level = string.Empty;
    }

    protected void Add()
    {
        ClearFields();
        mode = MODE.Add;
        ShowPopup = true;
    }

    protected async Task Update()
    {
        //add the preferred days
        await AddDays();
        string days = ListToString(preferredDays);
        Employee e = new Employee()
        {
            EmployeeId = employeeId,
            FirstName = firstName,
            LastName = lastName,
            Level = level,
            PreferredDays = days

        };

        await employeeService.UpdateEmployeeAsync(employeeId, e);
        ClearFields();
        await load();
        mode = MODE.None;
        ShowPopup = false;

    }

    protected async Task Delete()
    {
        await employeeService.DeleteEmployeeAsync(employeeId);
        ClearFields();
        await load();
        mode = MODE.None;
        ShowPopup = false;
    }

    protected async Task Show(string id)
    {
        employee = await employeeService.GetEmployeeByIdAsync(id);
        employeeId = employee.EmployeeId;
        firstName = employee.FirstName;
        lastName = employee.LastName;
        level = employee.Level;
        mode = MODE.EditDelete;
        ShowPopup = true;
    }

    protected async Task Cancel()
    {
        ClearFields();
        mode = MODE.None;
        ShowPopup = false;
    }

    //Add the days to the list of preferred days if checked
    protected async Task AddDays()
    {
        EditDays(checkboxMon, "Mon");
        EditDays(checkboxTue, "Tue");
        EditDays(checkboxWed, "Wed");
        EditDays(checkboxThu, "Thu");
        EditDays(checkboxFri, "Fri");
        EditDays(checkboxSat, "Sat");
        EditDays(checkboxSun, "Sun");


    }

    protected void EditDays(bool day, string dayName)
    {
        if (day)
            preferredDays.Add(dayName);
        else
        {
            preferredDays.Remove(dayName);
        }
    }

    protected void Change()
    {
        StateHasChanged();
    }

    //convert all the strings in the list into one list
    protected string ListToString(List<string> list)
    {
        string temp;
        string final;
        temp = string.Empty;
        final = string.Empty;
        foreach(string day in list)
        {
            temp = temp + day;
        }
        return temp;
    }

}
