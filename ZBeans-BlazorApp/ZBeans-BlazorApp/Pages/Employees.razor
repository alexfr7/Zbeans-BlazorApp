@page "/employees"

@using ZBeans_BlazorApp.Data
@using ZBeans_BlazorApp.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Web

@inject EmployeeService employeeService
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Employee Database</h3>



<!--This page is only able to be edited and seen if you are a manager or an admin-->
<AuthorizeView Roles="User, Admin">
    <NotAuthorized>
        <p>You do not have permission to view this page. Please contact the Administrator for assistance.</p>
    </NotAuthorized>
    <Authorized>
        <p>This shows a list of all current employees. </p>

        @if (employees == null)
        {
            <p><em>Loading...</em></p>
        }
        else

        {
            //The button to add a new employee
            <button @onclick="@Add" class=" btn btn-success">Add</button>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Level</th>
                    </tr>
                </thead>

                <tbody>
                    <!--Show every employeee that is stored in the StoreDbContext-->
                    @foreach (var item in employees)
                    {
                        <tr @onclick="@(() => Show(item.EmployeeId))">
                            <td>@item.EmployeeId.Substring(0, 10)</td>
                            <td>@item.FirstName</td>
                            <td>@item.LastName</td>
                            <td>@item.Level</td>
                        </tr>
                    }
                </tbody>
            </table>
        }

        <!--Popups to display the information overtop of the employee list-->

        @if (employees != null && mode == MODE.Add && ShowPopup) //Insert  Form
        {
            <div class=" modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class=" modal-content">
                        <div class=" modal-header">
                            <h3 class="modal-title">Edit or Delete User</h3>
                            <button type="button" class=" close"
                                    @onclick="@Cancel">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>
                        <input placeholder="First Name" @bind="firstName" />
                        <br />
                        <input placeholder="Last Name" @bind="lastName" />
                        <br />
                        <input placeholder="Level" @bind="level" />
                        <br />
                        <button @onclick="@Insert" class="btn btn-warning">Insert</button>
                        <button @onclick="@Cancel" class="btn btn-dark">Cancel</button>
                    </div>
                </div>
            </div>
        }

        @if (employees != null && mode == MODE.EditDelete && ShowPopup) //Update and Delete Form
        {
            <div class=" modal" tabindex="-1" style="display:block" role="dialog">
                <div class="modal-dialog">
                    <div class=" modal-content">
                        <div class=" modal-header">
                            <h3 class="modal-title">Edit or Delete User</h3>
                            <button type="button" class=" close"
                                    @onclick="@Cancel">
                                <span aria-hidden="true">X</span>
                            </button>
                        </div>

                        <input type="hidden" @bind="@employeeId" />
                        <br />
                        <input placeholder="First Name" @bind="@firstName" />
                        <br />
                        <input placeholder="Last Name" @bind="@lastName" />
                        <br />
                        <input placeholder="Level" @bind="@level" />
                        <br />
                        <button @onclick="@Update" class="btn btn-primary">Update</button>
                        <span>&nbsp;&nbsp;&nbsp;&nbsp;</span>
                        <button @onclick="@Delete" class="btn btn-danger">Delete</button>
                        <br />
                        <button @onclick="@Cancel" class="btn btn-dark">Cancel</button>

                    </div>
                </div>
            </div>
        }
    </Authorized>
</AuthorizeView>
@functions{
    List<Employee> employees;
    string employeeId;
    string firstName;
    string lastName;
    string level;
    private enum MODE { None, Add, EditDelete };
    MODE mode = MODE.None;
    Employee employee;
    bool ShowPopup = false;

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        employees = await employeeService.GetEmployeesAsync();


    }

    protected async Task Insert()
    {
        Employee e = new Employee()
        {
            EmployeeId = Guid.NewGuid().ToString(),
            FirstName = firstName,
            LastName = lastName,
            Level = level
        };

        await employeeService.InsertEmployeeAsync(e);
        ClearFields();
        await load();
        mode = MODE.None;   //hide the insert menu
        ShowPopup = false;
    }

    protected void ClearFields()
    {
        employeeId = string.Empty;
        firstName = string.Empty;
        lastName = string.Empty;
        level = string.Empty;
    }

    protected void Add()
    {
        ClearFields();
        mode = MODE.Add;
        ShowPopup = true;
    }

    protected async Task Update()
    {
        Employee e = new Employee()
        {
            EmployeeId = employeeId,
            FirstName = firstName,
            LastName = lastName,
            Level = level
        };

        await employeeService.UpdateEmployeeAsync(employeeId, e);
        ClearFields();
        await load();
        mode = MODE.None;
        ShowPopup = false;

    }

    protected async Task Delete()
    {
        await employeeService.DeleteEmployeeAsync(employeeId);
        ClearFields();
        await load();
        mode = MODE.None;
        ShowPopup = false;
    }

    protected async Task Show(string id)
    {
        employee = await employeeService.GetEmployeeByIdAsync(id);
        employeeId = employee.EmployeeId;
        firstName = employee.FirstName;
        lastName = employee.LastName;
        level = employee.Level;
        mode = MODE.EditDelete;
        ShowPopup = true;
    }

    protected async Task Cancel()
    {
        ClearFields();
        mode = MODE.None;
        ShowPopup = false;
    }
}
