@page "/employees"

@using ZBeans_BlazorApp.Data
@using ZBeans_BlazorApp.Models

@inject EmployeeService employeeService

<h1>Employee Database</h1>

<p>This shows a list of all current employees. </p>

@if (employees == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Level</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in employees)
            {
                <tr>
                    <td>@item.EmployeeId</td>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.Level</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (employees != null)
{
    <input placeholder="First Name" @bind="firstName" />
    <br />
    <input placeholder="Last Name" @bind="lastName" />
    <br />
    <input placeholder="Level" @bind="level" />
    <br />
    <button @onclick="@Insert" class="btn btn-warning">Insert</button>
}
@functions{
    List<Employee> employees;
    string employeeId;
    string firstName;
    string lastName;
    string level;

    protected override async Task OnInitializedAsync()
    {
        await load();
    }

    protected async Task load()
    {
        employees = await employeeService.GetEmployeesAsync();

    }

    protected async Task Insert()
    {
        Employee e = new Employee()
        {
            EmployeeId = Guid.NewGuid().ToString(),
            FirstName = firstName,
            LastName = lastName,
            Level = level
        };

        await employeeService.InsertEmployeeAsync(e);
        ClearFields();
        await load();
    }

    protected void ClearFields()
    {
        employeeId = string.Empty;
        firstName = string.Empty;
        lastName = string.Empty;
        level = string.Empty;
    }
}
