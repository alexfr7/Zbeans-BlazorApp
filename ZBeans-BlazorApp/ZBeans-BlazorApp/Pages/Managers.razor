@page "/managers"
<h3>Managers</h3>

@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;

@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMIN))
        {
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>User Name</th>
                    <th>Email</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var user in ColUsers)
                {
                    <tr>
                        <td>@user.Id.Substring(0, 5) ...</td>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>
                            <button class="btn btn-primary"
                                    @onclick="(() => EditUser(user))">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
            </tbody>

        </table>

            //the popup that allows the admin to add manager
            @if (ShowPopup)
            {
                <div class=" modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class=" modal-content">
                            <div class=" modal-header">
                                <h3 class="modal-title">Edit User</h3>
                                <button type="button" class=" close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>

                            <!--edit form-->
                            <div class=" modal-body">
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.UserName</p>
                                }

                                else
                                {
                                    <input class=" = form-control" type=" text" placeholder=" Username"
                                           @bind="objUser.UserName" />
                                }

                                <input class="form-control" type="text" placeholder="Email"
                                       @bind="objUser.Email" />

                                <!-- Password only gets reset when being edited-->
                                <button class=" btn btn-dark" @onclick="@OpenPassword">
                                    Edit Password
                                </button>
                                @if (editPW)
                                {
                                <input class="form-control" type="password" placeholder="Password"
                                       @bind="objUser.PasswordHash" />

                                }                                
                                <select class="form-control"
                                        @bind="@CurrentUserRole">
                                    @foreach (var option in Roles)
                                    {
                                        <option value="@option">
                                            @option
                                        </option>
                                    }
                                </select>
                                <br /><br />

                                <!--Save user-->
                                <button class="btn btn-primary"
                                        @onclick="SaveUser">
                                    Save
                                </button>

                                <!--Only show delete if not a new record-->
                                 @if (objUser.Id != "")
                                 {
                                     <button class="btn btn-danger"
                                             @onclick="DeleteUser">
                                         Delete
                                     </button>
                                 }
                                 <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-success" @onclick="AddNewUser">Add User</button>                   
        }

        else
        {
            <p>You are not signed in as an administrator.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in. Please login as an administrator to see this page.</p>
    </NotAuthorized>
</AuthorizeView>



@code {
    IdentityUser objUser = new IdentityUser();

    string CurrentUserRole { get; set; } = "Users";
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    //the possible roles a user can have
    List<string> Roles = new List<string>() { "Admin", "User" };


    string strError = "";
    //The pop up to add people starts off
    bool ShowPopup = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMIN = "Admin";
    string USER = "User";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    bool editPW = false;


}




@functions{
            string defaultPassword = "123ABc!";
            void AddNewUser()
            {
                //make a new user and open the popup
                objUser = new IdentityUser();
                objUser.PasswordHash = defaultPassword;
                objUser.Id = "";
                ShowPopup = true;
            }

            async Task SaveUser()
            {
                try
                {

                    if (objUser.Id != "")
                    {
                        //get the user
                        var user = await _UserManager.FindByIdAsync(objUser.Id);
                        user.Email = objUser.Email;


                        //update the user
                        await _UserManager.UpdateAsync(user);


                        //handle roles
                        //is it in admin?
                        var UserResult = await _UserManager.IsInRoleAsync(user, ADMIN);
                        if ((CurrentUserRole == ADMIN) & (!UserResult))
                        {
                            await _UserManager.AddToRoleAsync(user, ADMIN);
                        }
                        else
                        {
                            if ((CurrentUserRole != ADMIN) & (UserResult))
                            {
                                await _UserManager.RemoveFromRoleAsync(user, ADMIN);
                                await _UserManager.AddToRoleAsync(user, USER);
                            }
                        }

                    }


                    else
                    {
                        //insert new user
                        var NewUser = new IdentityUser
                        {
                            UserName = objUser.UserName,
                            Email = objUser.Email,
                            EmailConfirmed = true
                    };

                    var CreateResult = await _UserManager.CreateAsync(NewUser, objUser.PasswordHash);
                    if (!CreateResult.Succeeded)
                    {
                        if (CreateResult.Errors.FirstOrDefault() != null)
                        {
                            strError = CreateResult.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Error in User Creation";
                        }

                        //keep popup open
                        return;
                    }
                    else
                    {
                        //ROLE HANDLING
                        if (CurrentUserRole == ADMIN)
                        {
                            await _UserManager.AddToRoleAsync(NewUser, ADMIN);
                        }
                        else
                        {
                            await _UserManager.AddToRoleAsync(NewUser, USER);
                        }
                    }



                }

            //close popup
                ShowPopup = false;
                GetUsers();
            }
        catch (Exception e)
        {
            strError = e.GetBaseException().Message;
        }
    }

    async Task EditUser(IdentityUser _IdentityUser)
    {
        //edit a user and save changes in database

        objUser = _IdentityUser;
        //get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMIN);
            if (UserResult)
            {
                CurrentUserRole = ADMIN;
            }
            else
            {
                CurrentUserRole = "User";
            }
        }

        ShowPopup = true;

    }

    async Task DeleteUser()
    {
        //close popup
        ShowPopup = false;
        //get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            await _UserManager.DeleteAsync(user);
        }
        GetUsers();
    }

    void ClosePopup()
    {
        //close the edit/add/delete user popup
        ShowPopup = false;
    }

    void GetUsers()
    {
        strError = "";
        ColUsers = new List<IdentityUser>();
        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "******"
        });

        foreach (var i in user)
        {
            ColUsers.Add(i);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //make sure there is an administration role
        //"ADMIN"

        var roleResult = await _RoleManager.FindByNameAsync(ADMIN);
        var roleResultU = await _RoleManager.FindByNameAsync(USER);
        //Make ADMIN a role

        if (roleResult == null)
        {
            await _RoleManager.CreateAsync(new IdentityRole(ADMIN));
        }
        if(roleResultU == null)
        {
            await _RoleManager.CreateAsync(new IdentityRole(USER));
        }

        // we would put carters email here
        var user = await _UserManager.FindByNameAsync("ADMIN@ADMIN.COM");
        if (user != null)
        {
            //make sure he is admin
            var userResult = await _UserManager.IsInRoleAsync(user, ADMIN);
            if (!userResult)
            {
                await _UserManager.AddToRoleAsync(user, ADMIN);
            }
        }

        //get current user

        CurrentUser = (await authenticationStateTask).User;

        GetUsers();
    }

    protected async Task EditPassword()
    {
        //manually get a refresh token and then password is reset

        //get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);

        //get reset token
        var resetToken = await _UserManager.GeneratePasswordResetTokenAsync(user);
        var passworduser = await _UserManager.ResetPasswordAsync(
             user,
             resetToken,
             objUser.PasswordHash);
        if (!passworduser.Succeeded)
        {
            if (passworduser.Errors.FirstOrDefault() != null)
            {
                strError = passworduser.Errors.FirstOrDefault().Description;
            }
            else
            {
                strError = "Password Error";
            }
            return;
        }
        //update the user
        await _UserManager.UpdateAsync(user);
        editPW = false;
    }

    void OpenPassword()
    {
        editPW = true;
    }
}
